#!/usr/bin/ash

card_status() {
    /usr/bin/gpg --homedir "/etc/initcpio/gpg" --card-status --no-tty >/dev/null 2>&1
    return $?
}

decrypt_file() {
    local input="$1"
    local output="${2:--}"
    /usr/bin/gpg --homedir "/etc/initcpio/gpg" -o "${output}" --decrypt "${input}" \
        0</dev/console 1>/dev/console 2>/dev/console
    return $?
}

retry() {
    local timeout="$1"; shift
    local message="$1"; shift
    local command="$@"
    local status=1
    local i=0
    eval $command
    status=$?
    if [ "$status" -gt 0 ]; then
        echo "$message" >/dev/console
        echo -n "Timeout is $timeout seconds:" >/dev/console
        while true; do
            eval $command
            status=$?
            [ $status -eq 0 ] && break
            [ $i -eq $timeout ] && break
            i=$(($i + 1))
            echo -n "." >/dev/console
            read -t 1 -s 0</dev/console && break
        done
        echo "" >/dev/console
    fi
    return $status
}

run_hook() {
    modprobe -a -q dm-crypt >/dev/null 2>&1
    [ "${quiet}" = "y" ] && CSQUIET=">/dev/null"

    sed -re 's;#.*$;;g' -e '/^[ 	]*$/ d' -i /etc/crypttab

    IFS_BACKUP="$IFS"
    IFS=$'\n'
    for line in $(cat /etc/crypttab); do
        # parse fields in the crypttab line
        IFS="$IFS_BACKUP" read mapped_name device_path key_spec options <<EOF
$line
EOF

        IFS=: read key_file keyarg1 keyarg2 <<EOF
$key_spec
EOF
        # handle case of no key file
        if [ "$key_file" = "-" -o "$key_file" = "none" ]; then
            key_file=
        elif [ -c "${key_file}" ]; then
            # key file is a character device
            length=${keyarg1:-32}
            dd if=$key_file of=/keyfile.bin bs=1 count=$length >/dev/null 2>&1
            key_file=/keyfile.bin
        elif [ -b "${key_file}" ]; then
            echo "ERROR: Key files on block devices are not supported yet."
            key_file=
        elif [ -r "${key_file}" -a "${key_file%.gpg}" != "${key_file}" ]; then
            # /.gnupg is where the scdaemon socket lives
            test -d /.gnupg || mkdir -p /.gnupg
            chmod -R go-rwx /.gnupg /etc/initcpio/gpg

            # store the key at a known path. this allows the same key to be used
            # for multiple disks and only have to decrypt once.
            key_dest_path=/etc/initcpio/gpg/key_${key_file//\//S}

            # only attempt decryption if the keypath doesn't exist.
            if [ -r "${key_dest_path}" ]; then
                key_file="${key_dest_path}"
            else
                # we need to decrypt.

                # test communication with card - this is also needed for decryption
                # to work at all
                retry 60 "Waiting for the smartcard to be inserted (or press enter to falling back to passphrase)" card_status

                # now attempt to decrypt
                if decrypt_file "${key_file}" "${key_dest_path}"; then
                    # we got it!
                    key_file="${key_dest_path}"
                else
                    # if decryption fails, still prompt for a passphrase
                    echo "Failed to decrypt key file with GPG."
                    echo "Falling back to passphrase."
                    key_file=
                fi
            fi
        elif [ -r "${key_file}" ]; then
            cp "${key_file}" /keyfile.bin
            key_file=/keyfile.bin
        fi

        ## end key retrieval
        ## start device setup

        # parse options
        luksoptions=""
        for option in ${options//,/ }; do
            case "$option" in
                discard)
                    luksoptions="$luksoptions --allow-discards"
                    ;;
                *)
                    echo "Warning: ignoring unknown crypttab option: $option"
            esac
        done

        # resolve block device
        if resolved=$(resolve_device "${device_path}" "${rootdelay}"); then
            if cryptsetup isLuks "${device_path}"; then
                # LUKS devices

                # open device
                if [ -n "$key_file" ]; then
                    if ! eval cryptsetup luksOpen --key-file="${key_file}" $luksoptions "${resolved}" "${mapped_name}"; then
                        echo "WARNING: Failed to luksOpen crypto device ${device_path}"
                    fi
                else
                    if ! eval cryptsetup luksOpen $luksoptions "${resolved}" "${mapped_name}"; then
                        echo "WARNING: Failed to luksOpen crypto device ${device_path}"
                    fi
                fi
            else
                # non-LUKS
                echo "ERROR: ${device_path} is not a LUKS volume."
                echo "Plain dm-crypt is not supported by the scencrypt hook."
            fi
        else
            echo "WARNING: Failed to resolve crypto device ${device_path}"
        fi
    done
    IFS="$IFS_BACKUP"

    /usr/bin/gpg-connect-agent --homedir "/etc/initcpio/gpg" KILLAGENT /bye >/dev/null 2>&1
    rm -rf /etc/initcpio/gpg
}

# vim: set ft=sh ts=4 sw=4 et:
